"use strict";
const express = require("express");
const app = express();
const multer = require("multer");
const cors = require("cors");
const bodyParser = require("body-parser");
require("./config/database");
AnalyseGenetiques = require("./models/AnalyseGenetique");

var fs = require("fs");
var readline = require("readline");

const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, "uploads");
  },
  filename: (req, file, cb) => {
    const { originalname } = file;
    cb(null, originalname);
  },
});
const upload1 = multer({ storage });


const chromosome = require('./models/chromsome')

const User = require("./models/user")


app.post("/telecharger", async (req, res) => {
  console.log(">>>>>>>")
  let user = await User.create({
   Name : data[3].__EMPTY,
    age: data[4].__EMPTY
})
console.log(user)
  return res.json({ status: "--OK" });
});



app.post("/user",async (req, res) => {
  console.log(">>>>>>>")
       let user = await User.create({
        Name : data[3].__EMPTY,
         age: data[4].__EMPTY,
    })
    console.log(user)
    console.log(data[13])

    //-----------
    
    var myInterface = readline.createInterface({
    //input: fs.createReadStream("uploads/chrom1.vcf"),
    input: fs.createReadStream("uploads/txt.vcf"),
    });
    var lineno = 0;
    myInterface.on("line", async (item) => {
      
      if (lineno > 29) {
        var x = item.split("\t")[9];
        if (x.match("0/0:[1-14]*")) {
          console.log("ref,ref : ", x);
          await chromosome.create({
            USER_ID:user._id,
            "ID": item.split("\t")[1],
            "POS":item.split("\t")[2],
            "REF":item.split("\t")[3],
            "FORMAT":item.split("\t")[8],
            "RES":item.split("\t")[9],
            "TYPE":1          
          })
        } else if (x.match("0/1:[1-14]*")) {
          console.log("ref,alt : ", x);
          await chromosome.create({
            USER_ID:user._id,
            "ID": item.split("\t")[1],
            "POS":item.split("\t")[2],
            "REF":item.split("\t")[3],
            "FORMAT":item.split("\t")[8],
            "RES":item.split("\t")[9],
            "TYPE":2   
          })
        } else if (x.match("^1/1:[1-14]*")) {
          console.log("alt,alt : ", x);
          await chromosome.create({
            USER_ID:user._id,
            "ID": item.split("\t")[1],
            "POS":item.split("\t")[2],
            "REF":item.split("\t")[3],
            "FORMAT":item.split("\t")[8],
            "RES":item.split("\t")[9],
            "TYPE":3          
          })
     
        }
      }
      lineno++;
    });
    //---------
    // await chromsome.create({
    //     USER_ID:user._id,
    //     ID:"mychromo id",
    //     POS:"pos"
    // })

    //console.log(user._id.toString().substr(15,user._id.toString().length-2))
    return res.json({ status: "OK" , id:user._id });
  });


app.use(cors);
app.use(bodyParser.json());

const xlsxFile = require('read-excel-file/node');
const xlsx = require('xlsx');
const chromsome = require("./models/chromsome");
const workbook = xlsx.readFile('Medical-questionnaire_Livewellgx.xlsx');
const sheet_name_list = workbook.SheetNames;
var data = xlsx.utils.sheet_to_json(workbook.Sheets[sheet_name_list[1]]);
var data5 = JSON.stringify(data[6]);

console.log( "--------", data[3].__EMPTY);
/*
app.post("/test",(req, res)=>{
  console.log(req)
})
*/
app.post("/test",(req, res) => {
  return res.json({ status: "--OK" });
});



  
/*
var str2json = require("string-to-json");
fs.readFile("uploads/txt.vcf", "utf8", (err, data) => {
});*/

app.listen(3016, () => {
  console.log("THIS SERVER IS RUNING ON PORTS");
});